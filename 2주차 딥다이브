1. NumPy 배열의 생성과 연산이 데이터를 어떻게 처리하는지 설명하시오.(david)
2. HTTP 통신을 활용한 JSON 데이터 읽기와 저장이 데이터 활용의 기초가 되는 이유를 설명하시오.(jay)
3. Pandas의 누락 데이터 처리 기능이 데이터 정리에 어떤 이점을 제공하는지 설명하시오.(noah)
4. 데이터 시각화의 기본 개념과 Pandas를 활용한 시각화 방법의 종류와 각 방법의 장점을 설명하시오.(eunice) 😆
5. 데이터 병합과 피벗이 데이터 분석 과정에서 중요한 이유를 설명하시오.(joy) 
6. 고급 데이터 변환 및 처리를 위한 Pandas 기능(GroupBy 등) 및 기법을 설명하시오.(haebo)

-----------------------------------------------------------------------------------------
1. Numpy 배열의 생성과 연산이 데이터를 어떻게 처리하는지 설명하시오.
* Numpy 배열의 생성 / 연산이 데이터를 어떻게 처리하는지
* Numpy 배열의 생성과 연산이 데이터를 어떻게 처리하는지

- 배열 : 데이터를 저장하고 검색하기 위한 구조

Numpy에서 배열을 생성하는 일반적인 메커니즘 6가지
1. 다른 Python 구조 (Ex: 목록 및 튜플)에서 변환
2. 내재적인 Numpy 배열 생성 함수 (Ex: arange, ones, zeros 등)
3. 기존 배열 복제, 결합 또는 변형
4. 표준 또는 사용자 정의 형식 중 하나에서 디스크에서 배열 읽기
5. 문자열이나 버퍼를 사용하여 원시 바이트에서 배열 생성
6. 특수 라이브러리 함수 사용 (Ex: random)

이러한 방법을 사용하여 ndarrays 또는 구조화된 배열을 만들 수 있다.

1. Python 자료형 변환 : 리스트, 튜플에서 Numpy 배열 생성
2. Numpy 내장 함수 : zeros(), ones(), arange(), linspace() 등
3. 배열 복제/결합/변형 : 기존 배열을 변경, 결합, 모양 변환
4. 파일에서 읽기 : CSV, 텍스트 파일 등에서 데이터 불러오기
5. Raw 데이터 활용 : 바이트 데이터에서 배열 생성 (Raw 데이터 : 가공되지 않은 원본 데이터, byte 데이터 : 8비트로 구성된 데이터 단위)
6. 특수 함수 사용 : 랜덤 데이터, 특수 행렬 생성

Numpy 배열 생성 시 데이터 처리 방식
- 메모리 할당, 데이터 변환, 최적화된 연산
1. Numpy 배열이 데이터를 저장하는 방식
Numpy 배열은 일반적인 Python 리스트와 다르게 같은 데이터 타입을 가진 값들을 메모리에 연속적으로 저장 (Python 리스트 : 개별 요소들이 포인터를 통해 참조)
2. Numpy 배열 생성 시 데이터 처리 과정
메모리 할당
- 배열을 만들면 Numpy는 데이터를 저장할 메모리 공간을 먼저 할당
데이터 변환 (타입 일관성 유지)
- Numpy 배열은 모든 요소가 같은 데이터 타입을 가져야 함 (dtype 설정 가능)
빠른 연산을 위한 최적화된 처리
- Numpy 배열은 벡터 연산을 지원하여 Python 반복문 없이 고속 연산이 가능
3. Raw 데이터 활용 (byte 데이터 저장&변환)
Numpy 배열 <-> byte 데이터






