- Git 기초 - 

1. Git & GitHub 개념
: Git은 중앙 집중 버전 관리 시스템인 Google docs와 다르게 분산 버전 관리 시스템이다.
  (분산 버전 관리 시스템 : 인터넷 연결이 없어도 가능하고 서버가 날라가도 복구 가능성이 높음)

2. Git 명령어 기초 - 개요
: Git에서 init을 통해 폴더를 만들고 add를 통해 변경사항이 생길 때마다 추가를 하며 commit으로 저장을 하고 push로 업로드를 한다.

3. Git 명령어 기초 - 로컬 작업 관리 명령어
: Git에서 remote로 원격 저장소를 관리하고 add로 파일을 stage로 올리며 add를 사용할 때 .이나 *은 지양해야한다.

4. Git 명령어 기초 - 원격 저장소 동기화 명령어
: Git에서 첫 다운로드만 clone, 두번째 이후부터는 pull(fetch+merge)을 사용하며 stash는 임시저장을 하는 명령어이다.
(최근에는 브랜치명을 main으로 사용한다.)

5. Git 명령어 기초 - 브랜치
: branch는 commit의 복사본이고 diff는 코드 자체가 바뀐 것에 대한 차이를 아는 것이고 status는 상태를 아는 것이다.

6. Git 명령어 - 미니퀘스트
: GitHub에서 Readme.md파일 만들어서 자신의 프로필 제작

7. Git 명령어 기초 - 총정리


- Git 응용 - 

8. Git merge 방법 종류


9. Git 커밋 복구 전략


- Git 활용 - 

10. .gitignore 설정 가이드


11. 전략적 이슈 관리 방법 (커밋메세지와 이슈 관리 방법)


12. Git flow 브랜치 관리 전략


13. Organization에 내 코드를 병합하는 두 가지 방식


14. 미니퀘스트 - 우당탕탕 시나리오


15. 미니퀘스트 - til


16. GitHub 미니퀘스트 - 체계적인 QA 템플릿 활용



단어 / 뜻 / 비고
분산 버전 관리 시스템 : 네트워크에 의존하지 않고 로컬 시스템에 복제하여 버전을 관리함
commit : 파일에 대하여 변경을 한 후 변경을 확정하는 명령어
working directory : 현재 작업하고 있는 공간
repository : 저장소 (폴더)
branch : 다른 버전을 관리하기 위해 사용하는 독립적인 작업 흐름(나뭇가지를 연상시킴)
organization : 조직
origin : 현재 작업 중인 저장소
upstream : origin이 fork된 저장소
merge : branch들을 병합하는것
fork : 한 git 저장소에서 다른 저장소로 코드를 복사해오는 것
pull request : 어떤 부분을 수정했는지 확인할 수 있게 해주는 것




