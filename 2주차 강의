- 1교시 -

NumPy 넘파이
  : 기본적으로 패키지 / 라이브러리
  : 큰 행렬을 연산하기 위한 고성능 수학 함수와 도구를 제공

  : import numpy as np -> 이제 numpy를 np로 쓰겠다 
  : !pip install numpy -> 설치
  : a = np.array([1, 2, 3, 4, 5]) -> 함수 호출 : ()가 array가 함수라는 것을 알려주고 []는 안에 있는 것을 알려줌(할당)

(서드 파티) 라이브러리 / 패키지 -> 남이 짠 코드
가장 쉽게 가져오는 방법 pip : 패키지 관리자(범용)
  : pip 명령은 터미널에서 실행
  : import 명령은 파이썬 코드 안에서 실행

차원(dimension)
  : 대상의 크기, 범위, 특징 등을 나타내는 "측정 가능한/수로 표현할 수 있는(정량적)" 속성

속성 : 대상에 속한 성질
Object = 대상 = 객체
사과의 색 = 속성

배열이라는 자료구조의 중요한 점 
벡터 = 1차원 배열
행렬 = 2차원 배열
텐서 = 3차원 배열 (텐서 플로우) / 벡터와 행렬을 포함함
(4차원부터는 시각화가 거의 힘들다 / 0차원 : 스칼라(수 자체))
대상 : 배열
속성 : 차원
n차원은 0부터 n까지 축이 있음


- 2교시 -

NumPy 배열 / Python 배열 
  : .ndim : 넘파이 배열 차원 확인

차원 변환
- reshape() : 배열의 크기를 유지하면서 차원 변경
  * 불변량(invariant) : 어떤 변환 전후로 바뀌지 않는 양
  : 배열의 크기는 안 바뀌지만 차원의 크기는 바뀔 수 있음
  : 담는 방식을 바꾸는 것

- newaxis
  : 차원 추가

- shape
  * 튜플 : 순서가 있는 배열
  : 축 0 : 위에서 아래
  : 축 1 : 왼쪽에서 오른쪽
  * 차원 = 튜플의 크기 / 배열이 몇 개의 축을 가지고 있는지
  : 각 차원의 크기 : 각 축에 존재하는 요소의 개수
  * 차원 수 []의 개수로 볼 수 있음
  : shape(행 개수, 열 개수)
  * 불변량 -> 원소의 개수
  : .shape -> 배열의 형태 확인

- resize()
  * reshape은 원본이 바뀌지 않음 (복사)
  : resize는 원본 변경 (실제 대상 변경)
  : 바꿀 때 부족한 값은 0으로 채워짐

- flatten()
  : 다차원 배열을 1차원 배열로 변환
  : 뒤로 붙이는 방식

- revel()
  : 원본을 참고하여 

- transpose()
  : 행과 열을 교환


데이터 타입

수를 리터럴로 표현했다. [10, 20, 30]

데이터 타입 변환

  : 배열의 크기는 불변


index : 배열 내 특정 요소의 위치를 나타내는 정수값
indexing : 요소에 접근
-1 = len(array) -1 -> (syntactic sugar / 문법적 설탕) 
  * 슬라이싱 : array[1:4] -> 마지막은 포함하지 않음 즉 2번째 ~ 4번째까지





























